#!/usr/bin/env node

var spinner = require('char-spinner');
var program = require('commander');
var moment = require('moment');
var EJSON = require('mongodb-extended-json');
var Transit = require('../index');
var geo = require('../lib/utils/geo');


spinner();

program
  .usage('[options] <gtfs>')
  .option('-a, --array', 'Export as JSON Array')
  .option('-d, --date <n>', 'Date', moment)
  .option('-s, --span <a>..<b>', 'Time span', span)
  .option('-l, --dates <dates>', 'Dates', list)
  .option('-m, --mongo', 'Use MongoDB Extended JSON')
  .option('-n, --datasets <n>', 'Datasets to export', parseInt)
  .option('-i, --indentation <spaces>', 'Set indentation level (default: 2)', parseInt)
  .parse(process.argv);


var dir = program.args[0];
var dates = [ program.date ];


if (program.array) {
  var objects = [];
}
if (program.datasets) {
  var datasets = program.datasets;
}
if (program.indentation === undefined) {
  program.indentation = 2;
}


function print(obj) {
  var stringify = program.mongo ? EJSON.stringify : JSON.stringify;

  console.log(stringify(obj, null, Array(program.indentation+1).join(' ')));
}


var transit = new Transit();
transit.importGTFS(dir, function(err) {
  if (err)
    throw err;

  var trips = transit.trips;
  trips.forEach(function(trip) {
    if (program.datasets && datasets === 0) {
      return;
    }

    var positions;
    var featureCollection;

    dates.forEach(function(date) {
      if (!trip.service.operating(date)) {
        return;
      }

      if (!positions) {
        positions = trip.positions;
      }

      var prefixedPositions = prefixDates(positions, date);
      var featureCollection = geo.toGeoJSON.call(prefixedPositions);

      var object = {
        _id: date+'_'+trip.id,
        entities: {
          route: {
            id: trip.route.id,
            longName: trip.route.longName,
            shortName: trip.route.shortName,
            color: trip.route.color,
            textColor: trip.route.textColor,
            type: trip.route.type
          },
          shape: {
            id: (trip.shape ? trip.shape.id : null)
          }
        },
        loc: featureCollection
      }

      if (program.array) {
        objects.push(object);
      }
      else {
        print(object);
      }

      if (program.datasets) {
        datasets--;
        if (datasets === 0) {
          return;
        }
      }
    });
  });

  if (program.array) {
    print(objects);
  }
});


function span(val) {
  return val.split('..').map(moment);
}

function list(val) {
console.log('#1', val.split(','));
  return val.split(',').map(moment);
}


function prefixDates(positions, date) {
  var res = positions.map(function(position) {
    var dateStr = moment(date).format('YYYY-MM-DD')+' '+position.time;
    position.time = new Date(dateStr)
    return position;
  });
  return res;
}
